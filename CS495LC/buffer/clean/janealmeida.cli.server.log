CMBEGIN,,,cd /usr/src/fhttpd.,bash: cd: /usr/src/fhttpd.: No such file or directory,
CMBEGIN,Nov 28 12:08:36,/users/lclarkew,ls,answers.txt  lclarkew-intro21.tar.gz  top_secret,ls
CMBEGIN,,,cd /usr/src/fhttpd,,
CMBEGIN,Nov 28 12:08:53,/usr/src/fhttpd,ls,frobnick  index.html  Makefile<HT>webserver  webserver.c,ls
CMBEGIN,Nov 28 12:09:18,/usr/src/fhttpd,sudo make,make: Nothing to be done for 'project'.,sudo make
CMBEGIN,Nov 28 12:12:26,/usr/src/fhttpd,sudo ./webserver 8080,<NL>^C,sudo ./webserver 8080
CMBEGIN,Nov 28 12:11:32,/usr/src/fhttpd,sudo ./webserver 8080,GET / HTTP/1.1<NL>ls<NL>^C,sudo ./webserver 8080
CMBEGIN,Nov 28 12:14:50,/usr/src/fhttpd,ls,frobnick  index.html  Makefile<HT>webserver  webserver.c,ls
CMBEGIN,Nov 28 12:15:09,/usr/src/fhttpd,emacs webserver.c,%=><NL>=-111:----F1  *scratch*      All L1     (Fundamental) ---------------------------<NL>Loading 00debian-vars...done<NL>/etc/emacs/site-start.d/50autoconf.el (source)...<NL>done<NL>Loading /etc/emacs/site-start.d/50autoconf.el (source)...doneFile Edit Options Buffers Tools Lisp-Interaction Help                           <NL><NL><NL><NL><NL><NL><NL><NL><NL><NL><NL><NL><NL><NL><NL><NL><NL><NL><NL><NL><NL><NL><NL>-111:----F1  *scratch*      All L1     (Lisp Interaction) ----------------------<NL>For information about GNU Emacs and the GNU system%% type C-h C-a.<NL>Note: file is write protected<NL>Note: file is write protectedFile Edit Options Buffers Tools C Help                                          <NL><NL>// webserver.c                                                                  <NL><NL>// FrobozzCo Official Webserver                                                 <NL><NL>// Barbazzo Fernap barbazzo@gue.com                                             <NL><NL>// Gustar Woomax gustar@gue.com                                                 <NL><NL>// Wilbar Memboob wilbar@gue.com                                                <NL><NL><NL>// By the Frobozz Magic Webserver Company                                       <NL><NL>// Released under the Grue Public License                                       <NL><NL>// Frobruary 14th%% 1067 GUE                                                     <NL><NL><NL>// THERE IS NO WARRANTY FOR THE PROGRAM%% TO THE EXTENT PERMITTED                <NL><NL>// BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE               <NL><NL>// COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \u201CAS IS\u201D\<NL><NL>                                                                                <NL><NL>// WITHOUT WARRANTY OF ANY KIND%% EITHER EXPRESSED OR IMPLIED%% INCLUDING%%        <NL><NL>// BUT NOT LIMITED TO%% THE IMPLIED WARRANTIES OF MERCHANTABILITY AND            <NL><NL>// FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY          <NL><NL>// AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE         <NL><NL>// DEFECTIVE%% *AND IT WILL*%% YOU ASSUME THE COST OF ALL NECESSARY               <NL><NL>// SERVICING%% REPAIR OR CORRECTION.                                             <NL><NL><NL>-11U:%%%%--F1  webserver.c    Top L1     (C/l Abbrev) ----------------------------<NL>Note: file is write protectedFile Edit Options Buffers Tools C Help                                          <NL><NL>// webserver.c                                                                  <NL><NL>// FrobozzCo Official Webserver                                                 <NL><NL>// Barbazzo Fernap barbazzo@gue.com                                             <NL><NL>// Gustar Woomax gustar@gue.com                                                 <NL><NL>// Wilbar Memboob wilbar@gue.com                                                <NL><NL><NL>// By the Frobozz Magic Webserver Company                                       <NL><NL>// Released under the Grue Public License                                       <NL><NL>// Frobruary 14th%% 1067 GUE                                                     <NL><NL><NL>// THERE IS NO WARRANTY FOR THE PROGRAM%% TO THE EXTENT PERMITTED                <NL><NL>// BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE               <NL><NL>// COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \u201CAS IS\u201D\<NL><NL>                                                                                <NL><NL>// WITHOUT WARRANTY OF ANY KIND%% EITHER EXPRESSED OR IMPLIED%% INCLUDING%%        <NL><NL>// BUT NOT LIMITED TO%% THE IMPLIED WARRANTIES OF MERCHANTABILITY AND            <NL><NL>// FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY          <NL><NL>// AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE         <NL><NL>// DEFECTIVE%% *AND IT WILL*%% YOU ASSUME THE COST OF ALL NECESSARY               <NL><NL>// SERVICING%% REPAIR OR CORRECTION.                                             <NL><NL><NL>#include <stdio.h><NL>-11U:%%%%--F1  webserver.c    Top L1     (C/l Abbrev) ----------------------------<NL>Note: file is write protectedFile Edit Options Buffers Tools C Help                                           <NL><NL>// webserver.c                                                                   <NL><NL>// FrobozzCo Official Webserver                                                  <NL><NL>// Barbazzo Fernap barbazzo@gue.com                                              <NL><NL>// Gustar Woomax gustar@gue.com                                                  <NL><NL>// Wilbar Memboob wilbar@gue.com                                                 <NL><NL><NL>// By the Frobozz Magic Webserver Company                                        <NL><NL>// Released under the Grue Public License                                        <NL><NL>// Frobruary 14th%% 1067 GUE                                                      <NL><NL><NL>// THERE IS NO WARRANTY FOR THE PROGRAM%% TO THE EXTENT PERMITTED                 <NL><NL>// BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE                <NL><NL>// COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \u201CAS IS\u201D <NL>// WITHOUT WARRANTY OF ANY KIND%% EITHER EXPRESSED OR IMPLIED%% INCLUDING%%         <NL><NL>// BUT NOT LIMITED TO%% THE IMPLIED WARRANTIES OF MERCHANTABILITY AND             <NL><NL>// FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY           <NL><NL>// AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE          <NL><NL>// DEFECTIVE%% *AND IT WILL*%% YOU ASSUME THE COST OF ALL NECESSARY                <NL><NL>// SERVICING%% REPAIR OR CORRECTION.                                              <NL><NL><NL>#include <stdio.h><NL>#include <errno.h><NL>#include <string.h><NL>-11U:%%%%--F1  webserver.c    Top L1     (C/l Abbrev) -----------------------------<NL>Note: file is write protectedFile Edit Options Buffers Tools C Help                                             <NL><NL>// webserver.c                                                                     <NL><NL>// FrobozzCo Official Webserver                                                    <NL><NL>// Barbazzo Fernap barbazzo@gue.com                                                <NL><NL>// Gustar Woomax gustar@gue.com                                                    <NL><NL>// Wilbar Memboob wilbar@gue.com                                                   <NL><NL><NL>// By the Frobozz Magic Webserver Company                                          <NL><NL>// Released under the Grue Public License                                          <NL><NL>// Frobruary 14th%% 1067 GUE                                                        <NL><NL><NL>// THERE IS NO WARRANTY FOR THE PROGRAM%% TO THE EXTENT PERMITTED                   <NL><NL>// BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE                  <NL><NL>// COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \u201CAS IS\uinclude <stdio.h><NL>#include <errno.h><NL>#include <string.h><NL>#include <stdlib.h><NL>#include <netdb.h><NL>-11U:%%%%--F1  webserver.c    Top L1     (C/l Abbrev) -------------------------------<NL>Note: file is write protectedFile Edit Options Buffers Tools C Help                                                      <NL><NL>// webserver.c                                                                              <NL><NL>// FrobozzCo Official Webserver                                                             <NL><NL>// Barbazzo Fernap barbazzo@gue.com                                                         <NL><NL>// Gustar Woomax gustar@gue.com                                                             <NL><NL>// Wilbar Memboob wilbar@gue.com                                                            <NL><NL><NL>// By the Frobozz Magic Webserver Company                                                   <NL><NL>// Released under the Grue Public License                                                   <NL><NL>// Frobruary 14th%% 1067 GUE                                                                 <NL><NL><NL>// THERE IS NO WARRANTY FOR THE PROGRAM%% TO THE EXTENT PERMITTED                            <NL><NL>// BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE                           <NL><NL>// COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \u201CAS IS\uinclude <stdio.h><NL>#include <errno.h><NL>#include <string.h><NL>#include <stdlib.h><NL>#include <netdb.h><NL>#include <sys/stat.h><NL>#include <sys/types.h><NL>#include <sys/socket.h><NL>#include <netinet/in.h><NL>#include <arpa/inet.h><NL>#include <unistd.h><NL>#include <fcntl.h><NL>-11U:%%%%--F1  webserver.c    Top L1     (C/l Abbrev) ----------------------------------------<NL>Note: file is write protectedFile Edit Options Buffers Tools C Help                                                       <NL><NL>// webserver.c                                                                               <NL><NL>// FrobozzCo Official Webserver                                                              <NL><NL>// Barbazzo Fernap barbazzo@gue.com                                                          <NL><NL>// Gustar Woomax gustar@gue.com                                                              <NL><NL>// Wilbar Memboob wilbar@gue.com                                                             <NL><NL><NL>// By the Frobozz Magic Webserver Company                                                    <NL><NL>// Released under the Grue Public License                                                    <NL><NL>// Frobruary 14th%% 1067 GUE                                                                  <NL><NL><NL>// THERE IS NO WARRANTY FOR THE PROGRAM%% TO THE EXTENT PERMITTED                             <NL><NL>// BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE                            <NL><NL>// COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \u201CAS IS\uinclude <stdio.h><NL>#include <errno.h><NL>#include <string.h><NL>#include <stdlib.h><NL>#include <netdb.h><NL>#include <sys/stat.h><NL>#include <sys/types.h><NL>#include <sys/socket.h><NL>#include <netinet/in.h><NL>#include <arpa/inet.h><NL>#include <unistd.h><NL>#include <fcntl.h><NL>#include <time.h><NL>-11U:%%%%--F1  webserver.c    Top L1     (C/l Abbrev) -----------------------------------------<NL>Note: file is write protectedFile Edit Options Buffers Tools C Help                                                        <NL><NL>// webserver.c                                                                                <NL><NL>// FrobozzCo Official Webserver                                                               <NL><NL>// Barbazzo Fernap barbazzo@gue.com                                                           <NL><NL>// Gustar Woomax gustar@gue.com                                                               <NL><NL>// Wilbar Memboob wilbar@gue.com                                                              <NL><NL><NL>// By the Frobozz Magic Webserver Company                                                     <NL><NL>// Released under the Grue Public License                                                     <NL><NL>// Frobruary 14th%% 1067 GUE                                                                   <NL><NL><NL>// THERE IS NO WARRANTY FOR THE PROGRAM%% TO THE EXTENT PERMITTED                              <NL><NL>// BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE                             <NL><NL>// COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \u201CAS IS\uinclude <stdio.h><NL>#include <errno.h><NL>#include <string.h><NL>#include <stdlib.h><NL>#include <netdb.h><NL>#include <sys/stat.h><NL>#include <sys/types.h><NL>#include <sys/socket.h><NL>#include <netinet/in.h><NL>#include <arpa/inet.h><NL>#include <unistd.h><NL>#include <fcntl.h><NL>#include <time.h><NL>#include <pthread.h><NL>-11U:%%%%--F1  webserver.c    Top L1     (C/l Abbrev) ------------------------------------------<NL>Note: file is write protectedFile Edit Options Buffers Tools C Help                                                         <NL><NL>// webserver.c                                                                                 <NL><NL>// FrobozzCo Official Webserver                                                                <NL><NL>// Barbazzo Fernap barbazzo@gue.com                                                            <NL><NL>// Gustar Woomax gustar@gue.com                                                                <NL><NL>// Wilbar Memboob wilbar@gue.com                                                               <NL><NL><NL>// By the Frobozz Magic Webserver Company                                                      <NL><NL>// Released under the Grue Public License                                                      <NL><NL>// Frobruary 14th%% 1067 GUE                                                                    <NL><NL><NL>// THERE IS NO WARRANTY FOR THE PROGRAM%% TO THE EXTENT PERMITTED                               <NL><NL>// BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE                              <NL><NL>// COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \u201CAS IS\uinclude <stdio.h><NL>#include <errno.h><NL>#include <string.h><NL>#include <stdlib.h><NL>#include <netdb.h><NL>#include <sys/stat.h><NL>#include <sys/types.h><NL>#include <sys/socket.h><NL>#include <netinet/in.h><NL>#include <arpa/inet.h><NL>#include <unistd.h><NL>#include <fcntl.h><NL>#include <time.h><NL>#include <pthread.h><NL>-11U:%%%%--F1  webserver.c    Top L1     (C/l Abbrev) -------------------------------------------<NL>Note: file is write protectedFile Edit Options Buffers Tools C Help                                                         <NL><NL>// webserver.c                                                                                 <NL><NL>// FrobozzCo Official Webserver                                                                <NL><NL>// Barbazzo Fernap barbazzo@gue.com                                                            <NL><NL>// Gustar Woomax gustar@gue.com                                                                <NL><NL>// Wilbar Memboob wilbar@gue.com                                                               <NL><NL><NL>// By the Frobozz Magic Webserver Company                                                      <NL><NL>// Released under the Grue Public License                                                      <NL><NL>// Frobruary 14th%% 1067 GUE                                                                    <NL><NL><NL>// THERE IS NO WARRANTY FOR THE PROGRAM%% TO THE EXTENT PERMITTED                               <NL><NL>// BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE                              <NL><NL>// COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \u201CAS IS\uinclude <stdio.h><NL>#include <errno.h><NL>#include <string.h><NL>#include <stdlib.h><NL>#include <netdb.h><NL>#include <sys/stat.h><NL>#include <sys/types.h><NL>#include <sys/socket.h><NL>#include <netinet/in.h><NL>#include <arpa/inet.h><NL>#include <unistd.h><NL>#include <fcntl.h><NL>#include <time.h><NL>#include <pthread.h><NL><NL>-11U:%%%%--F1  webserver.c    Top L1     (C/l Abbrev) -------------------------------------------<NL>Note: file is write protectedFile Edit Options Buffers Tools C Help                                                          <NL><NL>// webserver.c                                                                                  <NL><NL>// FrobozzCo Official Webserver                                                                 <NL><NL>// Barbazzo Fernap barbazzo@gue.com                                                             <NL><NL>// Gustar Woomax gustar@gue.com                                                                 <NL><NL>// Wilbar Memboob wilbar@gue.com                                                                <NL><NL><NL>// By the Frobozz Magic Webserver Company                                                       <NL><NL>// Released under the Grue Public License                                                       <NL><NL>// Frobruary 14th%% 1067 GUE                                                                     <NL><NL><NL>// THERE IS NO WARRANTY FOR THE PROGRAM%% TO THE EXTENT PERMITTED                                <NL><NL>// BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE                               <NL><NL>// COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \u201CAS IS\uinclude <stdio.h><NL>#include <errno.h><NL>#include <string.h><NL>#include <stdlib.h><NL>#include <netdb.h><NL>#include <sys/stat.h><NL>#include <sys/types.h><NL>#include <sys/socket.h><NL>#include <netinet/in.h><NL>#include <arpa/inet.h><NL>#include <unistd.h><NL>#include <fcntl.h><NL>#include <time.h><NL>#include <pthread.h><NL><NL>-11U:%%%%--F1  webserver.c    Top L1     (C/l Abbrev) --------------------------------------------<NL>Note: file is write protectedFile Edit Options Buffers Tools C Help                                                          <NL><NL>// webserver.c                                                                                  <NL><NL>// FrobozzCo Official Webserver                                                                 <NL><NL>// Barbazzo Fernap barbazzo@gue.com                                                             <NL><NL>// Gustar Woomax gustar@gue.com                                                                 <NL><NL>// Wilbar Memboob wilbar@gue.com                                                                <NL><NL><NL>// By the Frobozz Magic Webserver Company                                                       <NL><NL>// Released under the Grue Public License                                                       <NL><NL>// Frobruary 14th%% 1067 GUE                                                                     <NL><NL><NL>// THERE IS NO WARRANTY FOR THE PROGRAM%% TO THE EXTENT PERMITTED                                <NL><NL>// BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE                               <NL><NL>// COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \u201CAS IS\uinclude <stdio.h><NL>#include <errno.h><NL>#include <string.h><NL>#include <stdlib.h><NL>#include <netdb.h><NL>#include <sys/stat.h><NL>#include <sys/types.h><NL>#include <sys/socket.h><NL>#include <netinet/in.h><NL>#include <arpa/inet.h><NL>#include <unistd.h><NL>#include <fcntl.h><NL>#include <time.h><NL>#include <pthread.h><NL><NL>#define _XOPEN_SOURCE<NL>-11U:%%%%--F1  webserver.c    Top L1     (C/l Abbrev) --------------------------------------------<NL>Note: file is write protectedFile Edit Options Buffers Tools C Help                                                           <NL><NL>// webserver.c                                                                                   <NL><NL>// FrobozzCo Official Webserver                                                                  <NL><NL>// Barbazzo Fernap barbazzo@gue.com                                                              <NL><NL>// Gustar Woomax gustar@gue.com                                                                  <NL><NL>// Wilbar Memboob wilbar@gue.com                                                                 <NL><NL><NL>// By the Frobozz Magic Webserver Company                                                        <NL><NL>// Released under the Grue Public License                                                        <NL><NL>// Frobruary 14th%% 1067 GUE                                                                      <NL><NL><NL>// THERE IS NO WARRANTY FOR THE PROGRAM%% TO THE EXTENT PERMITTED                                 <NL><NL>// BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE                                <NL><NL>// COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \u201CAS IS\u201D                  <NL><NL>// WITHOUT WARRANTY OF ANY KIND%% EITHER EXPRESSED OR IMPLIED%% INCLUDING%%                         <NL><NL>// BUT NOT LIMITED TO%% THE IMPLIED WARRANTIES OF MERCHANTABILITY AND                             <NL><NL>// FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY                           <NL><NL>// AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE                          <NL><NL>// DEFECTIVE%% *AND IT WILL*%% YOU ASSUME THE COST OF ALL NECESSARY                                <NL><NL>// SERVICING%% REPAIR OR CORRECTION.                                                              <NL><NL><NL>#include <stdio.h><NL>#include <errno.h><NL>#include <string.h><NL>#include <stdlib.h><NL>#include <netdb.h><NL>#include <sys/stat.h><NL>#include <sys/types.h><NL>#include <sys/socket.h><NL>#include <netinet/in.h><NL>#include <arpa/inet.h><NL>#include <unistd.h><NL>#include <fcntl.h><NL>#include <time.h><NL>#include <pthread.h><NL><NL>#define _XOPEN_SOURCE<NL>-11U:%%%%--F1  webserver.c    Top L1     (C/l Abbrev) ---------------------------------------------<NL>Note: file is write protectedFile Edit Options Buffers Tools C Help                                                           <NL><NL>// webserver.c                                                                                   <NL><NL>// FrobozzCo Official Webserver                                                                  <NL><NL>// Barbazzo Fernap barbazzo@gue.com                                                              <NL><NL>// Gustar Woomax gustar@gue.com                                                                  <NL><NL>// Wilbar Memboob wilbar@gue.com                                                                 <NL><NL><NL>// By the Frobozz Magic Webserver Company                                                        <NL><NL>// Released under the Grue Public License                                                        <NL><NL>// Frobruary 14th%% 1067 GUE                                                                      <NL><NL><NL>// THERE IS NO WARRANTY FOR THE PROGRAM%% TO THE EXTENT PERMITTED                                 <NL><NL>// BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE                                <NL><NL>// COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \u201CAS IS\u201D                  <NL><NL>// WITHOUT WARRANTY OF ANY KIND%% EITHER EXPRESSED OR IMPLIED%% INCLUDING%%                         <NL><NL>// BUT NOT LIMITED TO%% THE IMPLIED WARRANTIES OF MERCHANTABILITY AND                             <NL><NL>// FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY                           <NL><NL>// AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE                          <NL><NL>// DEFECTIVE%% *AND IT WILL*%% YOU ASSUME THE COST OF ALL NECESSARY                                <NL><NL>// SERVICING%% REPAIR OR CORRECTION.                                                              <NL><NL><NL>#include <stdio.h><NL>#include <errno.h><NL>#include <string.h><NL>#include <stdlib.h><NL>#include <netdb.h><NL>#include <sys/stat.h><NL>#include <sys/types.h><NL>#include <sys/socket.h><NL>#include <netinet/in.h><NL>#include <arpa/inet.h><NL>#include <unistd.h><NL>#include <fcntl.h><NL>#include <time.h><NL>#include <pthread.h><NL><NL>#define _XOPEN_SOURCE<NL><NL>-11U:%%%%--F1  webserver.c    Top L1     (C/l Abbrev) ---------------------------------------------<NL>Note: file is write protectedFile Edit Options Buffers Tools C Help                                                           <NL><NL>// webserver.c                                                                                   <NL><NL>// FrobozzCo Official Webserver                                                                  <NL><NL>// Barbazzo Fernap barbazzo@gue.com                                                              <NL><NL>// Gustar Woomax gustar@gue.com                                                                  <NL><NL>// Wilbar Memboob wilbar@gue.com                                                                 <NL><NL><NL>// By the Frobozz Magic Webserver Company                                                        <NL><NL>// Released under the Grue Public License                                                        <NL><NL>// Frobruary 14th%% 1067 GUE                                                                      <NL><NL><NL>// THERE IS NO WARRANTY FOR THE PROGRAM%% TO THE EXTENT PERMITTED                                 <NL><NL>// BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE                                <NL><NL>// COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \u201CAS IS\u201D                  <NL><NL>// WITHOUT WARRANTY OF ANY KIND%% EITHER EXPRESSED OR IMPLIED%% INCLUDING%%                         <NL><NL>// BUT NOT LIMITED TO%% THE IMPLIED WARRANTIES OF MERCHANTABILITY AND                             <NL><NL>// FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY                           <NL><NL>// AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE                          <NL><NL>// DEFECTIVE%% *AND IT WILL*%% YOU ASSUME THE COST OF ALL NECESSARY                                <NL><NL>// SERVICING%% REPAIR OR CORRECTION.                                                              <NL><NL><NL>#include <stdio.h><NL>#include <errno.h><NL>#include <string.h><NL>#include <stdlib.h><NL>#include <netdb.h><NL>#include <sys/stat.h><NL>#include <sys/types.h><NL>#include <sys/socket.h><NL>#include <netinet/in.h><NL>#include <arpa/inet.h><NL>#include <unistd.h><NL>#include <fcntl.h><NL>#include <time.h><NL>#include <pthread.h><NL><NL>#define _XOPEN_SOURCE<NL><NL>typedef struct {<NL>-11U:%%%%--F1  webserver.c    Top L1     (C/l Abbrev) ---------------------------------------------<NL>Note: file is write protectedFile Edit Options Buffers Tools C Help                                                           <NL><NL>// webserver.c                                                                                   <NL><NL>// FrobozzCo Official Webserver                                                                  <NL><NL>// Barbazzo Fernap barbazzo@gue.com                                                              <NL><NL>// Gustar Woomax gustar@gue.com                                                                  <NL><NL>// Wilbar Memboob wilbar@gue.com                                                                 <NL><NL><NL>// By the Frobozz Magic Webserver Company                                                        <NL><NL>// Released under the Grue Public License                                                        <NL><NL>// Frobruary 14th%% 1067 GUE                                                                      <NL><NL><NL>// THERE IS NO WARRANTY FOR THE PROGRAM%% TO THE EXTENT PERMITTED                                 <NL><NL>// BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE                                <NL><NL>// COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \u201CAS IS\u201D                  <NL><NL>// WITHOUT WARRANTY OF ANY KIND%% EITHER EXPRESSED OR IMPLIED%% INCLUDING%%                         <NL><NL>// BUT NOT LIMITED TO%% THE IMPLIED WARRANTIES OF MERCHANTABILITY AND                             <NL><NL>// FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY                           <NL><NL>// AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE                          <NL><NL>// DEFECTIVE%% *AND IT WILL*%% YOU ASSUME THE COST OF ALL NECESSARY                                <NL><NL>// SERVICING%% REPAIR OR CORRECTION.                                                              <NL><NL><NL>#include <stdio.h><NL>#include <errno.h><NL>#include <string.h><NL>#include <stdlib.h><NL>#include <netdb.h><NL>#include <sys/stat.h><NL>#include <sys/types.h><NL>#include <sys/socket.h><NL>#include <netinet/in.h><NL>#include <arpa/inet.h><NL>#include <unistd.h><NL>#include <fcntl.h><NL>#include <time.h><NL>#include <pthread.h><NL><NL>#define _XOPEN_SOURCE<NL><NL>typedef struct {<NL>        char *method;<NL>-11U:%%%%--F1  webserver.c    Top L1     (C/l Abbrev) ---------------------------------------------<NL>Note: file is write protectedFile Edit Options Buffers Tools C Help                                                          <NL><NL>// webserver.c                                                                                  <NL><NL>// FrobozzCo Official Webserver                                                                 <NL><NL>// Barbazzo Fernap barbazzo@gue.com                                                             <NL><NL>// Gustar Woomax gustar@gue.com                                                                 <NL><NL>// Wilbar Memboob wilbar@gue.com                                                                <NL><NL><NL>// By the Frobozz Magic Webserver Company                                                       <NL><NL>// Released under the Grue Public License                                                       <NL><NL>// Frobruary 14th%% 1067 GUE                                                                     <NL><NL><NL>// THERE IS NO WARRANTY FOR THE PROGRAM%% TO THE EXTENT PERMITTED                                <NL><NL>// BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE                               <NL><NL>// COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \u201CAS IS\u201D                 <NL><NL>// WITHOUT WARRANTY OF ANY KIND%% EITHER EXPRESSED OR IMPLIED%% INCLUDING%%                        <NL><NL>// BUT NOT LIMITED TO%% THE IMPLIED WARRANTIES OF MERCHANTABILITY AND                            <NL><NL>// FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY                          <NL><NL>// AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE                         <NL><NL>// DEFECTIVE%% *AND IT WILL*%% YOU ASSUME THE COST OF ALL NECESSARY                               <NL><NL>// SERVICING%% REPAIR OR CORRECTION.                                                             <NL><NL><NL>#include <stdio.h><NL>#include <errno.h><NL>#include <string.h><NL>#include <stdlib.h><NL>#include <netdb.h><NL>#include <sys/stat.h><NL>#include <sys/types.h><NL>#include <sys/socket.h><NL>#include <netinet/in.h><NL>#include <arpa/inet.h><NL>#include <unistd.h><NL>#include <fcntl.h><NL>#include <time.h><NL>#include <pthread.h><NL><NL>#define _XOPEN_SOURCE<NL><NL>typedef struct {<NL>        char *method;<NL>-11U:%%%%--F1  webserver.c    Top L1     (C/l Abbrev) --------------------------------------------<NL>Note: file is write protectedFile Edit Options Buffers Tools C Help                                                         <NL><NL>// webserver.c                                                                                 <NL><NL>// FrobozzCo Official Webserver                                                                <NL><NL>// Barbazzo Fernap barbazzo@gue.com                                                            <NL><NL>// Gustar Woomax gustar@gue.com                                                                <NL><NL>// Wilbar Memboob wilbar@gue.com                                                               <NL><NL><NL>// By the Frobozz Magic Webserver Company                                                      <NL><NL>// Released under the Grue Public License                                                      <NL><NL>// Frobruary 14th%% 1067 GUE                                                                    <NL><NL><NL>// THERE IS NO WARRANTY FOR THE PROGRAM%% TO THE EXTENT PERMITTED                               <NL><NL>// BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE                              <NL><NL>// COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \u201CAS IS\uinclude <stdio.h><NL>#include <errno.h><NL>#include <string.h><NL>#include <stdlib.h><NL>#include <netdb.h><NL>#include <sys/stat.h><NL>#include <sys/types.h><NL>#include <sys/socket.h><NL>#include <netinet/in.h><NL>#include <arpa/inet.h><NL>#include <unistd.h><NL>#include <fcntl.h><NL>#include <time.h><NL>#include <pthread.h><NL><NL>#define _XOPEN_SOURCE<NL><NL>typedef struct {<NL>        char *method;<NL>-11U:%%%%--F1  webserver.c    Top L1     (C/l Abbrev) -------------------------------------------<NL>Beginning of buffer<NL>2<NL><NL>456791014678920124578931235689<NL>        char *uri;<NL>        char *version;<NL>        char *headers;<NL>} httpreq_t;<NL><NL><NL>/* NOTE: this function is based on a function provided in the GNU "timegm" man                 <NL><NL>   page. timegm is a GNU extension to time.h that returns the given tm struct as               <NL><NL>   a UNIX timestamp in GMT/UTC%% rather than local time. The man page suggests a                <NL><NL>   function similar to the one below as a portable equivalent.                                 <NL><NL> */<NL>time_t my_timegm(struct tm *tm) {<NL>        time_t ret;<NL>        char *tz;<NL><NL>        tz = getenv("TZ");<NL>        putenv("TZ=GMT");<NL>        tzset();<NL>        ret = mktime(tm);<NL>        if (tz) { 7%% L4012345679512467                char envstr[strlen(tz) + 4];<NL>                envstr[0] = '\0';<NL>                strcat(envstr%% "TZ=");<NL>                strcat(envstr%% tz);<NL>                putenv(envstr);<NL>        } else {<NL>                putenv("TZ=");<NL>        }<NL><NL>        tzset();<NL><NL>        return ret;<NL>}<NL><NL>char *get_header(const httpreq_t *req%% const char* headername) {<NL>        char *hdrptr;<NL>        char *hdrend;<NL>        char *retval = NULL;<NL><NL>        char searchstr[strlen(headername) + 5];10%% L601356797124578        strcpy(searchstr%% "<NL>");<NL>        strcat(searchstr%% headername);<NL>        strcat(searchstr%% ": ");<NL><NL>        if (hdrptr = strstr(req->headers%% searchstr)) {<NL>                hdrptr += strlen(searchstr);<NL>                if (hdrend = strstr(hdrptr%% "<NL>")) {<NL>                        char hdrval[1024]; // temporary return value                           <NL><NL>                        memcpy((char *)hdrval%% hdrptr%% (hdrend - hdrptr));<NL>                        hdrval[hdrend - hdrptr] = '\0'; // tack null onto end of header value  <NL><NL>                        int hdrvallen = strlen(hdrval);<NL>                        retval = (char *)malloc((hdrvallen + 1) * sizeof(char)); // malloc a s\<NL><NL>pace for retval                                                                                <NL><NL>                        strcpy(retval%% (char *)hdrval);<NL>                } else {<NL>                        retval = (char *)malloc((strlen(hdrptr) + 1) * sizeof(char)); //       <NL><NL>                        strcpy(retval%% hdrptr);<NL>                }<NL>        }<NL>4%% L807991<NL>245678<NL><NL>        return retval;<NL>}<NL><NL>/* As long as str begins with a proper HTTP-Version followed by delim%% returns a               <NL><NL>   pointer to the start of the version number (e.g.%% 1.0). Returns NULL otherwise.             <NL><NL> */<NL>char *http_version_str(char *str%% char *delim) {<NL>        char *vstart = strstr(str%% "HTTP/");<NL>        char *vnumstart = str + 5;<NL>        char *vdot = strchr(str%% '.');<NL>        char *vend = strstr(str%% delim);<NL>        char *digits = "0123456789";<NL>        int majvlen = 0;<NL>        int minvlen = 0;<NL><NL>        if (!vstart || !vdot // something's missing                                            <NL><NL>                || vstart != str) // str doesn't start with "HTTP/"                            <NL><NL>                return NULL;<NL><NL>6%% L9910012345789101234567<NL><NL>        majvlen = strspn(vnumstart%% digits);<NL>        minvlen = strspn(vdot + 1%% digits);<NL><NL>        if (majvlen < 1 || (vnumstart + majvlen) != vdot // bad major version                  <NL><NL>                || minvlen < 1 || (vdot + minvlen + 1) != vend) // bad minor version           <NL><NL>                return NULL;<NL><NL>        return vnumstart;<NL>}<NL><NL>/* Fills req with the request data from datastr. Returns 0 on success.                         <NL><NL> */<NL><NL>int parsereq(httpreq_t *req%% char *datastr) {<NL>        char *position;<NL>        char *last_position = datastr;<NL>        char *temp_position;<NL>        int matchlen;<NL><NL><HT>req->method = "";21%% L11820123456789313567<NL>        req->uri = "";<NL>        req->version = "";<NL>        req->headers = "";<NL><NL>        if (!(position = strchr(last_position%% ' '))) {<NL>                return 1;<NL>        }<NL>        matchlen = (int)(position - last_position);<NL>        req->method = (char *)malloc((matchlen + 1) * sizeof(char));<NL>        memcpy(req->method%% last_position%% matchlen);<NL>        req->method[matchlen] = '\0';<NL>        last_position = position + 1;<NL><NL>        if (!(position = strchr(last_position%% ' '))<NL>                && !(position = strstr(last_position%% "<NL>"))) {<NL>                return 1;<NL>        }<NL><NL>        // strip any query string out of the URI                                               <NL><NL>        if ((temp_position = strchr(last_position%% '?')) && temp_position < position)5%% L13840137951357<NL>                matchlen = (int)(temp_position - last_position);<NL>        else<NL>                matchlen = (int)(position - last_position);<NL><NL>        req->uri = (char *)malloc((matchlen + 1) * sizeof(char));<NL>        memcpy(req->uri%% last_position%% matchlen);<NL>        req->uri[matchlen] = '\0';<NL>        if (position[0] == '<NL>') {<NL>                req->version = "0.9";<NL>                req->headers = "";<NL>                return 0; // simple req -- uri only                                            <NL><NL>        }<NL><NL>        // If we get here%% it's a full request%% get the HTTP version and headers               <NL><NL>        last_position = position + 1;<NL><NL>        if (!(position = strstr(last_position%% "<NL>"))<NL>                || !(last_position = http_version_str(last_position%% "<NL>"))) {<NL>                return 1;<NL>        }<NL>9%% L15963771357<NL>        matchlen = (int)(position - last_position);<NL>        req->version = (char *)malloc((matchlen + 1) * sizeof(char));<NL>        memcpy(req->version%% last_position%% matchlen);<NL>        req->version[matchlen] = '\0';<NL>        last_position = position;<NL><NL>        req->headers = (char *)malloc(strlen(last_position) * sizeof(char));<NL>        strcpy(req->headers%% last_position);<NL><NL>        return 0;<NL>}<NL><NL>char *contype(char *ext) {<NL>        if (strcmp(ext%% "html") == 0) return "text/html";<NL>        else if (strcmp(ext%% "htm") == 0) return "text/html";<NL>        else if (strcmp(ext%% "jpeg") == 0) return "image/jpeg";<NL>        else if (strcmp(ext%% "jpg") == 0) return "image/jpeg";<NL>        else if (strcmp(ext%% "gif") == 0) return "image/gif";<NL>        else if (strcmp(ext%% "txt") == 0) return "text/plain";<NL><HT>else return "application/octet-stream";33%% L17986899258<NL><NL>}<NL><NL>char *status(int statcode) {<NL>        if (statcode == 200)    return "200 OK";<NL>        else if (statcode == 304) return "304 Not Modified";<NL>        else if (statcode == 400) return "400 Bad Request";<NL>        else if (statcode == 403) return "403 Forbidden";<NL>        else if (statcode == 404) return "404 Not Found";<NL>        else if (statcode == 500) return "500 Internal Server Error";<NL>        else if (statcode == 501) return "501 Not Implemented";<NL>        else return "";<NL>}<NL><NL>int send_response(int sockfd%% httpreq_t *req%% int statcode) {<NL>        int urifd;<NL>        const int BUFSIZE = 1024;<NL>        char sendmessage[BUFSIZE];<NL>        char *path = req->uri;<NL><NL>        if (req->uri == NULL || req->method == NULL ||8%% L2002681012346789<NL>                req->headers == NULL || req->version == NULL) {<NL>                return 0;<NL>        }<NL><NL><NL>        if ((path[0] == '/') || ((strstr(path%% "http://") == path)<NL>                                                         && (path = strchr(path + 7%%  '/')))) \<NL><NL>{<NL>                path += 1; // remove leading slash                                             <NL><NL>                if (path[0] == '\0') {  // substituting in index.html for a blank URL!         <NL><NL>                        path = "index.html";<NL>                } else if (path[strlen(path) - 1] == '/') {<NL>                        //concatenating index.html for a /-terminated URL!                     <NL><NL>                        strcat(path%% "index.html");<NL>                }<NL>        } else {<NL>                statcode = 400;<NL>        }<NL><NL>        if (statcode == 200 && (urifd = open(path%% O_RDONLY%% 0)) < 0) {43%% L22012356<NL>78930367                if (errno == ENOENT || errno == ENOTDIR) { // file or directory doesn't exist  <NL><NL>                        statcode = 404;<NL>                } else if (errno == EACCES) { // access denied                                 <NL><NL>                        statcode = 403;<NL>                } else {<NL>                        // some other file access problem                                      <NL><NL>                        statcode = 500;<NL>                }<NL>        }<NL><NL>        if (strstr(path%% "..") != NULL) {<NL>                statcode = 500;<NL>        }<NL><NL><NL>        sendmessage[0] = '\0';<NL>        if (strcmp(req->version%% "0.9") != 0) { // full request                                <NL><NL>                char *ext; // file extension                                                   <NL><NL>                time_t curtime;<NL>8%% L23942551347<NL>                char *imstime;<NL>                struct tm tm;<NL>                struct stat stbuf;<NL><NL><NL>                if (statcode == 200) {<NL>                        if (ext = strrchr(path%% '.')) ext++; // skip the '.'                   <NL><NL>                        else ext = "";<NL>                } else {<NL>                        // errors are always html messages                                     <NL><NL>                        ext = "html";<NL>                }<NL><NL>                // Conditional GET                                                             <NL><NL>                if ((strcmp(req->method%% "GET") == 0)<NL>                        && (statcode == 200)<NL>                        && (imstime = get_header(req%% "If-Modified-Since"))) {<NL><NL>                        // Get statistics about the requested URI from the local filesystem    <NL><NL>                        if (stat(path%% &stbuf) == -1) {<NL>                                statcode = 500;<NL>                        }53%% L26035797135789<NL><NL><NL>                        if (!strptime(imstime%% "%%a%% %%d %%b %%Y %%H:%%M:%%S GMT"%% &tm)<NL>                                && !strptime(imstime%% "%%a%% %%d-%%b-%%y %%H:%%M:%%S GMT"%% &tm)<NL>                                && !strptime(imstime%% "%%a %%b %%d %%H:%%M:%%S %%Y"%% &tm)) {<NL>                                // badly formatted date                                        <NL><NL>                                statcode = 400;<NL>                        }<NL><NL>                        if (stbuf.st_mtime <= my_timegm(&tm)) {<NL>                                // Not Modified                                                <NL><NL>                                statcode = 304;<NL>                        }<NL>                }<NL><NL>                time(&curtime); // time for Date: header                                       <NL><NL>                strcat(sendmessage%% "HTTP/1.0 ");<NL>                strcat(sendmessage%% status(statcode));<NL>                strcat(sendmessage%% "<NL>Date: ");<NL>                strncat(sendmessage%% asctime(gmtime(&curtime))%% 24);<NL>                strcat(sendmessage%% "<NL>Server: Frobozz Magic Software Company Webserver v.00\<NL>5%% L2802345678990134682");<NL>                strcat(sendmessage%% "<NL>Connection: close");<NL>                strcat(sendmessage%% "<NL>Content-Type: ");<NL>                strcat(sendmessage%% contype(ext));<NL>                strcat(sendmessage%% "<NL><NL>");<NL><NL>        }<NL><NL>        if (statcode != 200) {<NL>                strcat(sendmessage%% "<html><head><title>");<NL>                strcat(sendmessage%% status(statcode));<NL>                strcat(sendmessage%% "</title></head><body><h2>HTTP/1.0</h2><h1>");<NL>                strcat(sendmessage%% status(statcode));<NL>                strcat(sendmessage%% "</h1><h2>URI: ");<NL>                strcat(sendmessage%% path);<NL>                strcat(sendmessage%% "</h2></body></html>");<NL>        }<NL><NL>        if (sendmessage[0] != '\0') {<NL>                // send headers as long as there are headers to send                           <NL>9%% L29930457911345                if (send(sockfd%% sendmessage%% strlen(sendmessage)%% 0) < 0) {<NL>                        perror("send");<NL>                        pthread_exit(NULL);<NL>                }<NL>        }<NL><NL>        if (statcode == 200 && (strcmp(req->method%% "HEAD") != 0)) {<NL>                // send the requested file as long as there's no error and the                 <NL><NL>                // request wasn't just for the headers                                         <NL><NL>                int readbytes;<NL><NL>                while (readbytes = read(urifd%% sendmessage%% BUFSIZE)) {<NL>                        if (readbytes < 0) {<NL>                                perror("read");<NL>                                pthread_exit(NULL);<NL>                        }<NL>                        if (send(sockfd%% sendmessage%% readbytes%% 0) < 0) {<NL>                                perror("send");<NL>                                pthread_exit(NULL);<NL>                        }<NL>                }<NL>        }<NL>}<NL><NL>void *data_thread(void *sockfd_ptr) {<NL><NL>        int sockfd = *(int *) sockfd_ptr;<NL>        const int BUFSIZE = 5;<NL>65%% L3273123456789402456<NL>        char recvmessage[BUFSIZE];<NL>        char *headerstr = NULL;<NL>        char *newheaderstr = NULL;<NL>        int recvbytes = 0;<NL>        int curheadlen = 0;<NL>        int totalheadlen = 0;<NL>        httpreq_t req;<NL>        int statcode = 200;<NL>        int done = 0;<NL>        int seen_header = 0;<NL>        char *header_end;<NL>        int content_length = 0;<NL>        char *qstr;<NL><NL>        free(sockfd_ptr); // we have the int value out of this now                             <NL><NL>        recvmessage[BUFSIZE - 1] = '\0'; // mark end of "string"                               <NL><NL><NL>        /* Read incoming client message from the socket */<NL>        while(!done && (recvbytes = recv(sockfd%% recvmessage%% BUFSIZE - 1%% 0))) {<NL>                if (recvbytes < 0) {70%% L34795015860236<NL>                        perror("recv");<NL>                        pthread_exit(NULL);<NL>                }<NL><NL><NL>                recvmessage[recvbytes] = '\0';<NL><NL>                if (seen_header) {<NL>                        // getting the entity body                                             <NL><NL>                        content_length -= recvbytes;<NL>                        if (content_length <= 0) done = 1;<NL><NL>                } else {<NL><NL>                        newheaderstr = (char *) malloc((totalheadlen + recvbytes + 1) * sizeof\<NL><NL>(char));<NL>                        newheaderstr[totalheadlen + recvbytes] = '\0';<NL>                        memcpy(newheaderstr%% headerstr%% totalheadlen);<NL>                        memcpy(newheaderstr + totalheadlen%% recvmessage%% recvbytes);<NL><NL>                        if (headerstr != NULL) {<NL>                                free(headerstr);4%% L369758801236                        }<NL><NL>                        headerstr = newheaderstr;<NL>                        totalheadlen += recvbytes;<NL><NL>                        header_end = strstr(headerstr%% "<NL><NL>");<NL><NL>                        if (header_end) {<NL>                                seen_header = 1;<NL>                                header_end[2] = '\0';<NL><NL>                                if (parsereq(&req%% headerstr) != 0) {<NL>                                        statcode = 400;<NL>                                }<NL><NL>                                if (strcmp(req.method%% "POST") == 0) {<NL><NL>                                        // grab the body length                                <NL><NL>                                        char *clenstr = get_header(&req%% "Content-Length");7%% L388902468400123456<NL><NL>                                        if (clenstr) {<NL><NL>                                                content_length = atoi(clenstr) - ((headerstr +\<NL><NL> totalheadlen) - header_end - 4);<NL><NL>                                                if (content_length <= 0) {<NL>                                                        done = 1;<NL>                                                }<NL><NL>                                                free(clenstr);<NL><NL>                                        } else {<NL><NL>                                                statcode = 400; // bad request -- no content l\<NL><NL>ength                                                                                          <NL><NL>                                                done = 1;<NL>                                        }<NL><NL>                                } else {<NL>81%% L408910<NL>1234567820135<NL><NL>                                        // This isn't a POST%% so there's no entity body        <NL><NL>                                        done = 1;<NL><NL>                                        if (strcmp(req.method%% "GET") != 0<NL>                                                && strcmp(req.method%% "HEAD") != 0) {<NL><NL>                                                statcode = 501; // unknown request method      <NL><NL>                                        }<NL><NL>                                }<NL>                        } // end of "if (header)end)"                                          <NL><NL>                }<NL>        } // end of recv while loop                                                            <NL><NL><NL>        // used to deref a NULL pointer here... :(                                             <NL><NL>        if (headerstr != NULL) {<NL>                printf("%%s<NL>"%% headerstr);<NL>                free(headerstr);<NL>        }4%% L4273245784134<NL>        send_response(sockfd%% &req%% statcode);<NL>        close(sockfd);<NL><NL>        return NULL;<NL><NL>}<NL><NL>int main(int argc%% char *argv[]) {<NL>        int acc%% sockfd%% clen%% port;<NL>        struct hostent *he;<NL>        struct sockaddr_in caddr%% saddr;<NL><NL>        if(argc <= 1) {<NL><NL>                fprintf(stderr%% "No port specified. Exiting!<NL>");<NL>                exit(1);<NL><NL>        }<NL><NL>        port = atoi(argv[1]);<NL><NL>7%% L44750235696246<NL><NL>        /* Obtain name and address for the local host */<NL>        if((he=gethostbyname("localhost"))==NULL) {<NL><NL>                herror("gethostbyname");<NL>                exit(1);<NL><NL>        }<NL><NL>        /* Open a TCP (Internet Stream) socket */<NL>        if((sockfd=socket(AF_INET%%SOCK_STREAM%%0)) == -1) {<NL><NL>                perror("socket");<NL>                exit(1);<NL><NL>        }<NL><NL>        /* Create socket address structure for the local host */<NL>        memset((char *) &saddr%% '\0'%% sizeof(saddr));<NL>        saddr.sin_family=AF_INET;<NL>        saddr.sin_port=htons(port);<NL><HT>saddr.sin_addr.s_addr=htonl(INADDR_ANY);90%% L46870246789801234567<NL><NL>        /* Bind our local address so that the client can send to us */<NL>        if(bind(sockfd%%(struct sockaddr *) &saddr%%sizeof(saddr)) == -1) {<NL>                perror("bind");<NL>                exit(1);<NL>        }<NL><NL>        if(listen(sockfd%%5) < 0) {<NL>                perror("listen");<NL>                exit(1);<NL>        }<NL><NL>        /* Infinite loop for receiving and processing client requests */<NL>        for(;;) {<NL>                clen=sizeof(caddr);<NL><NL>                /* Wait for a connection for a client process */<NL>                acc=accept(sockfd%%(struct sockaddr *) &caddr%%(socklen_t*)&clen);<NL>                if(acc < 0) {<NL>                        perror("accept");<NL>                        exit(1);<NL>2%% L489923575013578<NL>                } else {<NL>                        pthread_t *thread = (pthread_t *) malloc(sizeof(pthread_t));<NL>                        int *sockfd_ptr = (int *) malloc(sizeof(int));<NL><NL>                        *sockfd_ptr = acc;<NL>                        pthread_create(thread%% NULL%% data_thread%% sockfd_ptr);<NL>                }<NL>        }<NL><NL>        return 0;<NL>}<NL><NL><NL><NL><NL><NL><NL><NL><NL><NL><NL><NL><NL><NL><NL><NL><NL><NL>Bot L5120End of buffer1987654200864310<NL><NL>exit(1);<NL><NL>        }<NL><NL>        /* Create socket address structure for the local host */<NL>        memset((char *) &saddr%% '\0'%% sizeof(saddr));<NL>        saddr.sin_family=AF_INET;<NL>        saddr.sin_port=htons(port);<NL>        saddr.sin_addr.s_addr=htonl(INADDR_ANY);<NL><NL>        /* Bind our local address so that the client can send to us */<NL>        if(bind(sockfd%%(struct sockaddr *) &saddr%%sizeof(saddr)) == -1) {<NL>                perror("bind");<NL>                exit(1);<NL>        }<NL><NL>        if(listen(sockfd%%5) < 0) {<NL>                perror("listen");<NL>                exit(1);<NL>        }<NL>93%% L49864218986520<NL><NL>79<NL>        if(argc <= 1) {<NL><NL>                fprintf(stderr%% "No port specified. Exiting!<NL>");<NL>                exit(1);<NL><NL>        }<NL><NL>        port = atoi(argv[1]);<NL><NL>        /* Obtain name and address for the local host */<NL>        if((he=gethostbyname("localhost"))==NULL) {<NL><NL>                herror("gethostbyname");<NL>                exit(1);<NL><NL>        }<NL><NL>        /* Open a TCP (Internet Stream) socket */<NL>        if((sockfd=socket(AF_INET%%SOCK_STREAM%%0)) == -1) {<NL><NL>                perror("socket");1%% L4776432068642059<NL><NL>8<NL>        } // end of recv while loop                                                            <NL><NL><NL>        // used to deref a NULL pointer here... :(                                             <NL><NL>        if (headerstr != NULL) {<NL>                printf("%%s<NL>"%% headerstr);<NL>                free(headerstr);<NL>        }<NL><NL>        send_response(sockfd%% &req%% statcode);<NL>        close(sockfd);<NL><NL>        return NULL;<NL><NL>}<NL><NL>int main(int argc%% char *argv[]) {<NL>        int acc%% sockfd%% clen%% port;<NL>        struct hostent *he;<NL>        struct sockaddr_in caddr%% saddr;<NL>88%% L4576543210486542139<NL><NL>                                        } else {<NL><NL>                                                statcode = 400; // bad request -- no content l\<NL><NL>ength                                                                                          <NL><NL>                                                done = 1;<NL>                                        }<NL><NL>                                } else {<NL><NL>                                        // This isn't a POST%% so there's no entity body        <NL><NL>                                        done = 1;<NL><NL>                                        if (strcmp(req.method%% "GET") != 0<NL>                                                && strcmp(req.method%% "HEAD") != 0) {<NL><NL>                                                statcode = 501; // unknown request method      <NL><NL>                                        }<NL><NL>                                }<NL>                        } // end of "if (header)end)"                                          <NL><NL>                }5%% L437541287631018<NL><NL>                                if (parsereq(&req%% headerstr) != 0) {<NL>                                        statcode = 400;<NL>                                }<NL><NL>                                if (strcmp(req.method%% "POST") == 0) {<NL><NL>                                        // grab the body length                                <NL><NL>                                        char *clenstr = get_header(&req%% "Content-Length");<NL><NL>                                        if (clenstr) {<NL><NL>                                                content_length = atoi(clenstr) - ((headerstr +\<NL><NL> totalheadlen) - header_end - 4);<NL><NL>                                                if (content_length <= 0) {<NL>                                                        done = 1;<NL>                                                }<NL><NL>                                                free(clenstr);<NL>2%% L417508631398<NL>if (content_length <= 0) done = 1;<NL><NL>                } else {<NL><NL>                        newheaderstr = (char *) malloc((totalheadlen + recvbytes + 1) * sizeof\<NL><NL>(char));<NL>                        newheaderstr[totalheadlen + recvbytes] = '\0';<NL>                        memcpy(newheaderstr%% headerstr%% totalheadlen);<NL>                        memcpy(newheaderstr + totalheadlen%% recvmessage%% recvbytes);<NL><NL>                        if (headerstr != NULL) {<NL>                                free(headerstr);<NL>                        }<NL><NL>                        headerstr = newheaderstr;<NL>                        totalheadlen += recvbytes;<NL><NL>                        header_end = strstr(headerstr%% "<NL><NL>");<NL><NL>                        if (header_end) {<NL>                                seen_header = 1;<NL>                                header_end[2] = '\0';<NL>78%% L396389830        char *header_end;<NL>        int content_length = 0;<NL>        char *qstr;<NL><NL>        free(sockfd_ptr); // we have the int value out of this now                             <NL><NL>        recvmessage[BUFSIZE - 1] = '\0'; // mark end of "string"                               <NL><NL><NL>        /* Read incoming client message from the socket */<NL>        while(!done && (recvbytes = recv(sockfd%% recvmessage%% BUFSIZE - 1%% 0))) {<NL>                if (recvbytes < 0) {<NL>                        perror("recv");<NL>                        pthread_exit(NULL);<NL>                }<NL><NL><NL>                recvmessage[recvbytes] = '\0';<NL><NL>                if (seen_header) {<NL>                        // getting the entity body                                             <NL><NL>                        content_length -= recvbytes;5%% L376268559                                pthread_exit(NULL);<NL>                        }<NL>                }<NL>        }<NL>}<NL><NL>void *data_thread(void *sockfd_ptr) {<NL><NL>        int sockfd = *(int *) sockfd_ptr;<NL>        const int BUFSIZE = 5;<NL>        char recvmessage[BUFSIZE];<NL>        char *headerstr = NULL;<NL>        char *newheaderstr = NULL;<NL>        int recvbytes = 0;<NL>        int curheadlen = 0;<NL>        int totalheadlen = 0;<NL>        httpreq_t req;<NL>        int statcode = 200;<NL>        int done = 0;<NL>        int seen_header = 0;2%% L3564248420398<NL><NL>7<NL>        if (sendmessage[0] != '\0') {<NL>                // send headers as long as there are headers to send                           <NL><NL>                if (send(sockfd%% sendmessage%% strlen(sendmessage)%% 0) < 0) {<NL>                        perror("send");<NL>                        pthread_exit(NULL);<NL>                }<NL>        }<NL><NL>        if (statcode == 200 && (strcmp(req->method%% "HEAD") != 0)) {<NL>                // send the requested file as long as there's no error and the                 <NL><NL>                // request wasn't just for the headers                                         <NL><NL>                int readbytes;<NL><NL>                while (readbytes = read(urifd%% sendmessage%% BUFSIZE)) {<NL>                        if (readbytes < 0) {<NL>                                perror("read");<NL>                                pthread_exit(NULL);<NL>                        }<NL>                        if (send(sockfd%% sendmessage%% readbytes%% 0) < 0) {<NL>                                perror("send");67%% L336543212976531197<NL>                strcat(sendmessage%% status(statcode));<NL>                strcat(sendmessage%% "<NL>Date: ");<NL>                strncat(sendmessage%% asctime(gmtime(&curtime))%% 24);<NL>                strcat(sendmessage%% "<NL>Server: Frobozz Magic Software Company Webserver v.00\<NL><NL>2");<NL>                strcat(sendmessage%% "<NL>Connection: close");<NL>                strcat(sendmessage%% "<NL>Content-Type: ");<NL>                strcat(sendmessage%% contype(ext));<NL>                strcat(sendmessage%% "<NL><NL>");<NL><NL>        }<NL><NL>        if (statcode != 200) {<NL>                strcat(sendmessage%% "<html><head><title>");<NL>                strcat(sendmessage%% status(statcode));<NL>                strcat(sendmessage%% "</title></head><body><h2>HTTP/1.0</h2><h1>");<NL>                strcat(sendmessage%% status(statcode));<NL>                strcat(sendmessage%% "</h1><h2>URI: ");<NL>                strcat(sendmessage%% path);<NL>                strcat(sendmessage%% "</h2></body></html>");<NL>        }<NL>2%% L315310953129986<NL>                        // Get statistics about the requested URI from the local filesystem    <NL><NL>                        if (stat(path%% &stbuf) == -1) {<NL>                                statcode = 500;<NL>                        }<NL><NL>                        if (!strptime(imstime%% "%%a%% %%d %%b %%Y %%H:%%M:%%S GMT"%% &tm)<NL>                                && !strptime(imstime%% "%%a%% %%d-%%b-%%y %%H:%%M:%%S GMT"%% &tm)<NL>                                && !strptime(imstime%% "%%a %%b %%d %%H:%%M:%%S %%Y"%% &tm)) {<NL>                                // badly formatted date                                        <NL><NL>                                statcode = 400;<NL>                        }<NL><NL>                        if (stbuf.st_mtime <= my_timegm(&tm)) {<NL>                                // Not Modified                                                <NL><NL>                                statcode = 304;<NL>                        }<NL>                }<NL><NL>                time(&curtime); // time for Date: header                                       <NL><NL>                strcat(sendmessage%% "HTTP/1.0 ");58%% L295432187531797<NL><NL>                char *ext; // file extension                                                   <NL><NL>                time_t curtime;<NL>                char *imstime;<NL>                struct tm tm;<NL>                struct stat stbuf;<NL><NL><NL>                if (statcode == 200) {<NL>                        if (ext = strrchr(path%% '.')) ext++; // skip the '.'                   <NL><NL>                        else ext = "";<NL>                } else {<NL>                        // errors are always html messages                                     <NL><NL>                        ext = "html";<NL>                }<NL><NL>                // Conditional GET                                                             <NL><NL>                if ((strcmp(req->method%% "GET") == 0)<NL>                        && (statcode == 200)<NL>                        && (imstime = get_header(req%% "If-Modified-Since"))) {<NL>5%% L275316987531597<NL><NL>6<NL>        }<NL><NL>        if (statcode == 200 && (urifd = open(path%% O_RDONLY%% 0)) < 0) {<NL>                if (errno == ENOENT || errno == ENOTDIR) { // file or directory doesn't exist  <NL><NL>                        statcode = 404;<NL>                } else if (errno == EACCES) { // access denied                                 <NL><NL>                        statcode = 403;<NL>                } else {<NL>                        // some other file access problem                                      <NL><NL>                        statcode = 500;<NL>                }<NL>        }<NL><NL>        if (strstr(path%% "..") != NULL) {<NL>                statcode = 500;<NL>        }<NL><NL><NL>        sendmessage[0] = '\0';<NL>        if (strcmp(req->version%% "0.9") != 0) { // full request                                <NL>1%% L25543210486543210386<NL>        const int BUFSIZE = 1024;<NL>        char sendmessage[BUFSIZE];<NL>        char *path = req->uri;<NL><NL>        if (req->uri == NULL || req->method == NULL ||<NL>                req->headers == NULL || req->version == NULL) {<NL>                return 0;<NL>        }<NL><NL><NL>        if ((path[0] == '/') || ((strstr(path%% "http://") == path)<NL>                                                         && (path = strchr(path + 7%%  '/')))) \<NL><NL>{<NL>                path += 1; // remove leading slash                                             <NL><NL>                if (path[0] == '\0') {  // substituting in index.html for a blank URL!         <NL><NL>                        path = "index.html";<NL>                } else if (path[strlen(path) - 1] == '/') {<NL>                        //concatenating index.html for a /-terminated URL!                     <NL><NL>                        strcat(path%% "index.html");<NL>                }<NL>        } else {<NL>                statcode = 400;47%% L234225311975<NL>        else if (strcmp(ext%% "jpg") == 0) return "image/jpeg";<NL>        else if (strcmp(ext%% "gif") == 0) return "image/gif";<NL>        else if (strcmp(ext%% "txt") == 0) return "text/plain";<NL>        else return "application/octet-stream";<NL><NL>}<NL><NL>char *status(int statcode) {<NL>        if (statcode == 200)    return "200 OK";<NL>        else if (statcode == 304) return "304 Not Modified";<NL>        else if (statcode == 400) return "400 Bad Request";<NL>        else if (statcode == 403) return "403 Forbidden";<NL>        else if (statcode == 404) return "404 Not Found";<NL>        else if (statcode == 500) return "500 Internal Server Error";<NL>        else if (statcode == 501) return "501 Not Implemented";<NL>        else return "";<NL>}<NL><NL>int send_response(int sockfd%% httpreq_t *req%% int statcode) {<NL>        int urifd;1%% L214321009753119975<NL>        if (!(position = strstr(last_position%% "<NL>"))<NL>                || !(last_position = http_version_str(last_position%% "<NL>"))) {<NL>                return 1;<NL>        }<NL><NL>        matchlen = (int)(position - last_position);<NL>        req->version = (char *)malloc((matchlen + 1) * sizeof(char));<NL>        memcpy(req->version%% last_position%% matchlen);<NL>        req->version[matchlen] = '\0';<NL>        last_position = position;<NL><NL>        req->headers = (char *)malloc(strlen(last_position) * sizeof(char));<NL>        strcpy(req->headers%% last_position);<NL><NL>        return 0;<NL>}<NL><NL>char *contype(char *ext) {<NL>        if (strcmp(ext%% "html") == 0) return "text/html";<NL>        else if (strcmp(ext%% "htm") == 0) return "text/html";<NL>        else if (strcmp(ext%% "jpeg") == 0) return "image/jpeg";36%% L193108876543207865<NL><NL>4<NL>        }<NL><NL>        // strip any query string out of the URI                                               <NL><NL>        if ((temp_position = strchr(last_position%% '?')) && temp_position < position)<NL>                matchlen = (int)(temp_position - last_position);<NL>        else<NL>                matchlen = (int)(position - last_position);<NL><NL>        req->uri = (char *)malloc((matchlen + 1) * sizeof(char));<NL>        memcpy(req->uri%% last_position%% matchlen);<NL>        req->uri[matchlen] = '\0';<NL>        if (position[0] == '<NL>') {<NL>                req->version = "0.9";<NL>                req->headers = "";<NL>                return 0; // simple req -- uri only                                            <NL><NL>        }<NL><NL>        // If we get here%% it's a full request%% get the HTTP version and headers               <NL><NL>        last_position = position + 1;<NL>2%% L17321698765420564<NL>        char *last_position = datastr;<NL>        char *temp_position;<NL>        int matchlen;<NL><NL>        req->method = "";<NL>        req->uri = "";<NL>        req->version = "";<NL>        req->headers = "";<NL><NL>        if (!(position = strchr(last_position%% ' '))) {<NL>                return 1;<NL>        }<NL>        matchlen = (int)(position - last_position);<NL>        req->method = (char *)malloc((matchlen + 1) * sizeof(char));<NL>        memcpy(req->method%% last_position%% matchlen);<NL>        req->method[matchlen] = '\0';<NL>        last_position = position + 1;<NL><NL>        if (!(position = strchr(last_position%% ' '))<NL>                && !(position = strstr(last_position%% "<NL>"))) {<NL>                return 1;28%% L152048543210398753<NL><NL>        if (!vstart || !vdot // something's missing                                            <NL><NL>                || vstart != str) // str doesn't start with "HTTP/"                            <NL><NL>                return NULL;<NL><NL>        majvlen = strspn(vnumstart%% digits);<NL>        minvlen = strspn(vdot + 1%% digits);<NL><NL>        if (majvlen < 1 || (vnumstart + majvlen) != vdot // bad major version                  <NL><NL>                || minvlen < 1 || (vdot + minvlen + 1) != vend) // bad minor version           <NL><NL>                return NULL;<NL><NL>        return vnumstart;<NL>}<NL><NL>/* Fills req with the request data from datastr. Returns 0 on success.                         <NL><NL> */<NL><NL>int parsereq(httpreq_t *req%% char *datastr) {<NL>        char *position;4%% L1320286543119864<NL><NL>} else {<NL>                        retval = (char *)malloc((strlen(hdrptr) + 1) * sizeof(char)); //       <NL><NL>                        strcpy(retval%% hdrptr);<NL>                }<NL>        }<NL><NL>        return retval;<NL>}<NL><NL>/* As long as str begins with a proper HTTP-Version followed by delim%% returns a               <NL><NL>   pointer to the start of the version number (e.g.%% 1.0). Returns NULL otherwise.             <NL><NL> */<NL>char *http_version_str(char *str%% char *delim) {<NL>        char *vstart = strstr(str%% "HTTP/");<NL>        char *vnumstart = str + 5;<NL>        char *vdot = strchr(str%% '.');<NL>        char *vend = strstr(str%% delim);<NL>        char *digits = "0123456789";<NL>        int majvlen = 0;<NL>        int minvlen = 0;<NL>0%% L112008654321099 754<NL><NL><NL>char *get_header(const httpreq_t *req%% const char* headername) {<NL>        char *hdrptr;<NL>        char *hdrend;<NL>        char *retval = NULL;<NL><NL>        char searchstr[strlen(headername) + 5];<NL>        strcpy(searchstr%% "<NL>");<NL>        strcat(searchstr%% headername);<NL>        strcat(searchstr%% ": ");<NL><NL>        if (hdrptr = strstr(req->headers%% searchstr)) {<NL>                hdrptr += strlen(searchstr);<NL>                if (hdrend = strstr(hdrptr%% "<NL>")) {<NL>                        char hdrval[1024]; // temporary return value                           <NL><NL>                        memcpy((char *)hdrval%% hdrptr%% (hdrend - hdrptr));<NL>                        hdrval[hdrend - hdrptr] = '\0'; // tack null onto end of header value  <NL><NL>                        int hdrvallen = strlen(hdrval);<NL>                        retval = (char *)malloc((hdrvallen + 1) * sizeof(char)); // malloc a s\<NL><NL>pace for retval                                                                                <NL><NL>                        strcpy(retval%% (char *)hdrval);15%% L921898765432107987654<NL><NL>3<NL>time_t ret;<NL>        char *tz;<NL><NL>        tz = getenv("TZ");<NL>        putenv("TZ=GMT");<NL>        tzset();<NL>        ret = mktime(tm);<NL>        if (tz) {<NL>                char envstr[strlen(tz) + 4];<NL>                envstr[0] = '\0';<NL>                strcat(envstr%% "TZ=");<NL>                strcat(envstr%% tz);<NL>                putenv(envstr);<NL>        } else {<NL>                putenv("TZ=");<NL>        }<NL><NL>        tzset();<NL><NL>        return ret;<NL>}<NL>3%% L7106975105987543<NL><NL>2<NL>#include <unistd.h><NL>#include <fcntl.h><NL>#include <time.h><NL>#include <pthread.h><NL><NL>#define _XOPEN_SOURCE<NL><NL>typedef struct {<NL>        char *method;<NL>        char *uri;<NL>        char *version;<NL>        char *headers;<NL>} httpreq_t;<NL><NL><NL>/* NOTE: this function is based on a function provided in the GNU "timegm" man                 <NL><NL>   page. timegm is a GNU extension to time.h that returns the given tm struct as               <NL><NL>   a UNIX timestamp in GMT/UTC%% rather than local time. The man page suggests a                <NL><NL>   function similar to the one below as a portable equivalent.                                 <NL><NL> */<NL>time_t my_timegm(struct tm *tm) { 9%% L50498765310398753// THERE IS NO WARRANTY FOR THE PROGRAM%% TO THE EXTENT PERMITTED                               <NL><NL>// BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE                              <NL><NL>// COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \u201CAS IS\uinclude <stdio.h><NL>#include <errno.h><NL>#include <string.h><NL>#include <stdlib.h><NL>#include <netdb.h><NL>#include <sys/stat.h><NL>#include <sys/types.h><NL>#include <sys/socket.h><NL>#include <netinet/in.h><NL>#include <arpa/inet.h>2%% L30276// webserver.c                                                                                 <NL><NL>// FrobozzCo Official Webserver                                                                <NL><NL>// Barbazzo Fernap barbazzo@gue.com                                                            <NL><NL>// Gustar Woomax gustar@gue.com                                                                <NL><NL>// Wilbar Memboob wilbar@gue.com                                                               <NL><NL><NL>// By the Frobozz Magic Webserver Company                                                      <NL><NL>// Released under the Grue Public License                                                      <NL><NL>// Frobruary 14th%% 1067 GUE                                                                    <NL><NL>Top L1 <NL>Beginning of buffer<NL>Buffer is read-only: #<buffer webserver.c><NL>2<NL><NL>357911345792147302346        char *uri;<NL>        char *version;<NL>        char *headers;<NL>} httpreq_t;<NL><NL><NL>/* NOTE: this function is based on a function provided in the GNU "timegm" man                 <NL><NL>   page. timegm is a GNU extension to time.h that returns the given tm struct as               <NL><NL>   a UNIX timestamp in GMT/UTC%% rather than local time. The man page suggests a                <NL><NL>   function similar to the one below as a portable equivalent.                                 <NL><NL> */<NL>time_t my_timegm(struct tm *tm) {<NL>        time_t ret;<NL>        char *tz;<NL><NL>        tz = getenv("TZ");<NL>        putenv("TZ=GMT");<NL>        tzset();<NL>        ret = mktime(tm);<NL>        if (tz) { 7%% L4023850278                char envstr[strlen(tz) + 4];<NL>                envstr[0] = '\0';<NL>                strcat(envstr%% "TZ=");<NL>                strcat(envstr%% tz);<NL>                putenv(envstr);<NL>        } else {<NL>                putenv("TZ=");<NL>        }<NL><NL>        tzset();<NL><NL>        return ret;<NL>}<NL><NL>char *get_header(const httpreq_t *req%% const char* headername) {<NL>        char *hdrptr;<NL>        char *hdrend;<NL>        char *retval = NULL;<NL><NL>        char searchstr[strlen(headername) + 5];10%% L604871378        strcpy(searchstr%% "<NL>");<NL>        strcat(searchstr%% headername);<NL>        strcat(searchstr%% ": ");<NL><NL>        if (hdrptr = strstr(req->headers%% searchstr)) {<NL>                hdrptr += strlen(searchstr);<NL>                if (hdrend = strstr(hdrptr%% "<NL>")) {<NL>                        char hdrval[1024]; // temporary return value                           <NL><NL>                        memcpy((char *)hdrval%% hdrptr%% (hdrend - hdrptr));<NL>                        hdrval[hdrend - hdrptr] = '\0'; // tack null onto end of header value  <NL><NL>                        int hdrvallen = strlen(hdrval);<NL>                        retval = (char *)malloc((hdrvallen + 1) * sizeof(char)); // malloc a s\<NL><NL>pace for retval                                                                                <NL><NL>                        strcpy(retval%% (char *)hdrval);<NL>                } else {<NL>                        retval = (char *)malloc((strlen(hdrptr) + 1) * sizeof(char)); //       <NL><NL>                        strcpy(retval%% hdrptr);<NL>                }<NL>        }<NL>4%% L80591268<NL><NL>        return retval;<NL>}<NL><NL>/* As long as str begins with a proper HTTP-Version followed by delim%% returns a               <NL><NL>   pointer to the start of the version number (e.g.%% 1.0). Returns NULL otherwise.             <NL><NL> */<NL>char *http_version_str(char *str%% char *delim) {<NL>        char *vstart = strstr(str%% "HTTP/");<NL>        char *vnumstart = str + 5;<NL>        char *vdot = strchr(str%% '.');<NL>        char *vend = strstr(str%% delim);<NL>        char *digits = "0123456789";<NL>        int majvlen = 0;<NL>        int minvlen = 0;<NL><NL>        if (!vstart || !vdot // something's missing                                            <NL><NL>                || vstart != str) // str doesn't start with "HTTP/"                            <NL><NL>                return NULL;<NL><NL>        majvlen = strspn(vnumstart%% digits);<NL>        minvlen = strspn(vdot + 1%% digits);7%% L10271279<NL>        if (majvlen < 1 || (vnumstart + majvlen) != vdot // bad major version                  <NL><NL>                || minvlen < 1 || (vdot + minvlen + 1) != vend) // bad minor version           <NL><NL>                return NULL;<NL><NL>        return vnumstart;<NL>}<NL><NL>/* Fills req with the request data from datastr. Returns 0 on success.                         <NL><NL> */<NL><NL>int parsereq(httpreq_t *req%% char *datastr) {<NL>        char *position;<NL>        char *last_position = datastr;<NL>        char *temp_position;<NL>        int matchlen;<NL><NL>        req->method = "";<NL>        req->uri = "";<NL>        req->version = "";<NL><HT>req->headers = "";21%% L121593245840<NL><NL>        if (!(position = strchr(last_position%% ' '))) {<NL>                return 1;<NL>        }<NL>        matchlen = (int)(position - last_position);<NL>        req->method = (char *)malloc((matchlen + 1) * sizeof(char));<NL>        memcpy(req->method%% last_position%% matchlen);<NL>        req->method[matchlen] = '\0';<NL>        last_position = position + 1;<NL><NL>        if (!(position = strchr(last_position%% ' '))<NL>                && !(position = strstr(last_position%% "<NL>"))) {<NL>                return 1;<NL>        }<NL><NL>        // strip any query string out of the URI                                               <NL><NL>        if ((temp_position = strchr(last_position%% '?')) && temp_position < position)<NL>                matchlen = (int)(temp_position - last_position);<NL>        else<NL>                matchlen = (int)(position - last_position);6%% L141357951345}<NL><NL>char *contype(char *ext) {<NL><HT>if (strcmp(ext%% "html") == 0) return "text/html";<NL>        else if (strcmp(ext%% "htm") == 0) return "text/html";<NL><HT>else if (strcmp(ext%% "jpeg") == 0) return "image/jpeg";<NL>        else if (strcmp(ext%% "jpg") == 0) return "image/jpeg";<NL>        else if (strcmp(ext%% "gif") == 0) return "image/gif";<NL><HT>else if (strcmp(ext%% "txt") == 0) return "text/plain";<NL>        else return "application/octet-stream";<NL><NL>}<NL><NL>char *status(int statcode) {<NL><HT>if (statcode == 200)    return "200 OK";<NL><HT>else if (statcode == 304) return "304 Not Modified";<NL><HT>else if (statcode == 400) return "400 Bad Request";<NL><HT>else if (statcode == 403) return "403 Forbidden";<NL><HT>else if (statcode == 404) return "404 Not Found";<NL><HT>else if (statcode == 500) return "500 Internal Server Error";<NL><HT>else if (statcode == 501) return "501 Not Implemented";<NL><HT>else return "";<NL><NL><NL>int send_response(int sockfd%% httpreq_t *req%% int statcode) {<NL><HT>int urifd;<NL><HT>const int BUFSIZE = 1024;<NL><HT>char sendmessage[BUFSIZE];<NL><HT>char *path = req->uri;<NL><NL><HT>if (req->uri == NULL || req->method == NULL ||<NL><HT><HT>req->headers == NULL || req->version == NULL) {<NL><HT>        return 0;<NL><HT>}<NL><NL><NL><HT>if ((path[0] == '/') || ((strstr(path%% "http://") == path)<NL><HT>                                                 && (path = strchr(path + 7%%  '/')))) \<NL>{40%% L20821356<NL>                path += 1; // remove leading slash                                             <NL><NL>                if (path[0] == '\0') {  // substituting in index.html for a blank URL!         <NL><NL>                        path = "index.html";<NL>                } else if (path[strlen(path) - 1] == '/') {<NL>                        //concatenating index.html for a /-terminated URL!                     <NL><NL>                        strcat(path%% "index.html");<NL>                }<NL>        } else {<NL>                statcode = 400;<NL>        }<NL><NL>        if (statcode == 200 && (urifd = open(path%% O_RDONLY%% 0)) < 0) {<NL>                if (errno == ENOENT || errno == ENOTDIR) { // file or directory doesn't exist  <NL><NL>                        statcode = 404;<NL>                } else if (errno == EACCES) { // access denied                                 <NL><NL>                        statcode = 403;<NL>                } else {<NL>                        // some other file access problem                                      <NL><NL>                        statcode = 500;5%% L22732544                }<NL>        }<NL><NL>        if (strstr(path%% "..") != NULL) {<NL>                statcode = 500;<NL>        }<NL><NL><NL>        sendmessage[0] = '\0';<NL>        if (strcmp(req->version%% "0.9") != 0) { // full request                                <NL><NL>                char *ext; // file extension                                                   <NL><NL>                time_t curtime;<NL>                char *imstime;<NL>                struct tm tm;<NL>                struct stat stbuf;<NL><NL><NL>                if (statcode == 200) {<NL>                        if (ext = strrchr(path%% '.')) ext++; // skip the '.'                   <NL><NL>                        else ext = "";9%% L2465860                } else {<NL>                        // errors are always html messages                                     <NL><NL>                        ext = "html";<NL>                }<NL><NL>                // Conditional GET                                                             <NL><NL>                if ((strcmp(req->method%% "GET") == 0)<NL>                        && (statcode == 200)<NL>                        && (imstime = get_header(req%% "If-Modified-Since"))) {<NL><NL>                        // Get statistics about the requested URI from the local filesystem    <NL><NL>                        if (stat(path%% &stbuf) == -1) {<NL>                                statcode = 500;<NL>                        }<NL><NL>                        if (!strptime(imstime%% "%%a%% %%d %%b %%Y %%H:%%M:%%S GMT"%% &tm)<NL>                                && !strptime(imstime%% "%%a%% %%d-%%b-%%y %%H:%%M:%%S GMT"%% &tm)<NL>                                && !strptime(imstime%% "%%a %%b %%d %%H:%%M:%%S %%Y"%% &tm)) {<NL>                                // badly formatted date                                        <NL><NL>                                statcode = 400;54%% L26678812                        }<NL><NL>                        if (stbuf.st_mtime <= my_timegm(&tm)) {<NL>                                // Not Modified                                                <NL><NL>                                statcode = 304;<NL>                        }<NL>                }<NL><NL>                time(&curtime); // time for Date: header                                       <NL><NL>                strcat(sendmessage%% "HTTP/1.0 ");<NL>                strcat(sendmessage%% status(statcode));<NL>                strcat(sendmessage%% "<NL>Date: ");<NL>                strncat(sendmessage%% asctime(gmtime(&curtime))%% 24);<NL>                strcat(sendmessage%% "<NL>Server: Frobozz Magic Software Company Webserver v.00\<NL><NL>2");<NL>                strcat(sendmessage%% "<NL>Connection: close");<NL>                strcat(sendmessage%% "<NL>Content-Type: ");<NL>                strcat(sendmessage%% contype(ext));<NL>                strcat(sendmessage%% "<NL><NL>");<NL><NL>        }<NL>7%% L28890348<NL>        if (statcode != 200) {<NL>                strcat(sendmessage%% "<html><head><title>");<NL>                strcat(sendmessage%% status(statcode));<NL>                strcat(sendmessage%% "</title></head><body><h2>HTTP/1.0</h2><h1>");<NL>                strcat(sendmessage%% status(statcode));<NL>                strcat(sendmessage%% "</h1><h2>URI: ");<NL>                strcat(sendmessage%% path);<NL>                strcat(sendmessage%% "</h2></body></html>");<NL>        }<NL><NL>        if (sendmessage[0] != '\0') {<NL>                // send headers as long as there are headers to send                           <NL><NL>                if (send(sockfd%% sendmessage%% strlen(sendmessage)%% 0) < 0) {<NL>                        perror("send");<NL>                        pthread_exit(NULL);<NL>                }<NL>        }<NL><NL>        if (statcode == 200 && (strcmp(req->method%% "HEAD") != 0)) {<NL>                // send the requested file as long as there's no error and the                 <NL><NL>                // request wasn't just for the headers                                         <NL><NL>                int readbytes;<NL><NL>61%% L31157223<NL>                while (readbytes = read(urifd%% sendmessage%% BUFSIZE)) {<NL>                        if (readbytes < 0) {<NL>                                perror("read");<NL>                                pthread_exit(NULL);<NL>                        }<NL>                        if (send(sockfd%% sendmessage%% readbytes%% 0) < 0) {<NL>                                perror("send");<NL>                                pthread_exit(NULL);<NL>                        }<NL>                }<NL>        }<NL>}<NL><NL>void *data_thread(void *sockfd_ptr) {<NL><NL>        int sockfd = *(int *) sockfd_ptr;<NL>        const int BUFSIZE = 5;<NL>        char recvmessage[BUFSIZE];<NL>        char *headerstr = NULL;<NL>        char *newheaderstr = NULL;<NL>        int recvbytes = 0;<NL>        int curheadlen = 0;<NL>        int totalheadlen = 0;<NL>        httpreq_t req;<NL>        int statcode = 200;<NL>        int done = 0;<NL>        int seen_header = 0;<NL><HT>char *header_end;8%% L338405517<NL>        int content_length = 0;<NL>        char *qstr;<NL><NL>        free(sockfd_ptr); // we have the int value out of this now                             <NL><NL>        recvmessage[BUFSIZE - 1] = '\0'; // mark end of "string"                               <NL><NL><NL>        /* Read incoming client message from the socket */<NL>        while(!done && (recvbytes = recv(sockfd%% recvmessage%% BUFSIZE - 1%% 0))) {<NL>                if (recvbytes < 0) {<NL>                        perror("recv");<NL>                        pthread_exit(NULL);<NL>                }<NL><NL><NL>                recvmessage[recvbytes] = '\0';<NL><NL>                if (seen_header) {<NL>                        // getting the entity body                                             <NL><NL>                        content_length -= recvbytes;<NL>                        if (content_length <= 0) done = 1;<NL><NL>                } else {72%% L3602346724679<NL><NL>                        newheaderstr = (char *) malloc((totalheadlen + recvbytes + 1) * sizeof\<NL><NL>(char));<NL>                        newheaderstr[totalheadlen + recvbytes] = '\0';<NL>                        memcpy(newheaderstr%% headerstr%% totalheadlen);<NL>                        memcpy(newheaderstr + totalheadlen%% recvmessage%% recvbytes);<NL><NL>                        if (headerstr != NULL) {<NL>                                free(headerstr);<NL>                        }<NL><NL>                        headerstr = newheaderstr;<NL>                        totalheadlen += recvbytes;<NL><NL>                        header_end = strstr(headerstr%% "<NL><NL>");<NL><NL>                        if (header_end) {<NL>                                seen_header = 1;<NL>                                header_end[2] = '\0';<NL>5%% L38013456799013568<NL><NL>                                if (parsereq(&req%% headerstr) != 0) {<NL>                                        statcode = 400;<NL>                                }<NL><NL>                                if (strcmp(req.method%% "POST") == 0) {<NL><NL>                                        // grab the body length                                <NL><NL>                                        char *clenstr = get_header(&req%% "Content-Length");<NL><NL>                                        if (clenstr) {<NL><NL>                                                content_length = atoi(clenstr) - ((headerstr +\<NL><NL> totalheadlen) - header_end - 4);<NL><NL>                                                if (content_length <= 0) {<NL>                                                        done = 1;<NL>                                                }<NL><NL><HT><HT><HT><HT><HT><HT>free(clenstr);9%% L3994013C-c <down> is undefined4678910<NL>123456<NL><NL>                                        } else {<NL><NL>                                                statcode = 400; // bad request -- no content l\<NL><NL>ength                                                                                          <NL><NL>                                                done = 1;<NL>                                        }<NL><NL>                                } else {<NL><NL>                                        // This isn't a POST%% so there's no entity body        <NL><NL>                                        done = 1;<NL><NL>                                        if (strcmp(req.method%% "GET") != 0<NL>                                                && strcmp(req.method%% "HEAD") != 0) {<NL><NL>                                                statcode = 501; // unknown request method      <NL><NL>                                        }<NL>82%% L41720<NL>1234Buffer is read-only: #<buffer webserver.c><NL>                                }<NL>                        } // end of "if (header)end)"                                          <NL><NL>                }<NL>        } // end of recv while loop                                                            <NL><NL><NL>        // used to deref a NULL pointer here... :(                                             <NL><NL>        if (headerstr != NULL) {<NL>                printf("%%s<NL>"%% headerstr);<NL>                free(headerstr);<NL>        }<NL><NL>        send_response(sockfd%% &req%% statcode);<NL>        close(sockfd);<NL><NL>        return NULL;<NL><NL>}<NL><NL>int main(int argc%% char *argv[]) {<NL>        int acc%% sockfd%% clen%% port;<NL>        struct hostent *he;<NL>        struct sockaddr_in caddr%% saddr;5%% L43941355135<NL>        if(argc <= 1) {<NL><NL>                fprintf(stderr%% "No port specified. Exiting!<NL>");<NL>                exit(1);<NL><NL>        }<NL><NL>        port = atoi(argv[1]);<NL><NL>        /* Obtain name and address for the local host */<NL>        if((he=gethostbyname("localhost"))==NULL) {<NL><NL>                herror("gethostbyname");<NL>                exit(1);<NL><NL>        }<NL><NL>        /* Open a TCP (Internet Stream) socket */<NL>        if((sockfd=socket(AF_INET%%SOCK_STREAM%%0)) == -1) {<NL><NL>                perror("socket");<NL>                exit(1);9%% L46139779<NL>        }<NL><NL>        /* Create socket address structure for the local host */<NL>        memset((char *) &saddr%% '\0'%% sizeof(saddr));<NL>        saddr.sin_family=AF_INET;<NL>        saddr.sin_port=htons(port);<NL>        saddr.sin_addr.s_addr=htonl(INADDR_ANY);<NL><NL>        /* Bind our local address so that the client can send to us */<NL>        if(bind(sockfd%%(struct sockaddr *) &saddr%%sizeof(saddr)) == -1) {<NL>                perror("bind");<NL>                exit(1);<NL>        }<NL><NL>        if(listen(sockfd%%5) < 0) {<NL>                perror("listen");<NL>                exit(1);<NL>        }<NL><NL>        /* Infinite loop for receiving and processing client requests */<NL>        for(;;) {<NL>clen=sizeof(caddr);91%% L48346<NL><HT><HT>exit(1);<NL><HT>}<NL><NL>if(listen(sockfd%%5) < 0) {<NL><HT>        perror("listen");<NL><HT><HT>exit(1);<NL><HT>}<NL><NL><HT>/* Infinite loop for receiving and processing client requests */<NL><HT>for(;;) {<NL>clen=sizeof(caddr);<NL><NL><HT>        /* Wait for a connection for a client process */<NL><HT><HT>acc=accept(sockfd%%(struct sockaddr *) &caddr%%(socklen_t*)&clen);<NL><HT><HT>if(acc < 0) {<NL><HT><HT>        perror("accept");<NL><HT><HT><HT>exit(1);<NL><HT>        } else {<NL>pthread_t *thread = (pthread_t *) malloc(sizeof(pthread_t));<NL><HT>                int *sockfd_ptr = (int *) malloc(sizeof(int));<NL><NL><HT>                *sockfd_ptr = acc;<NL><HT>                pthread_create(thread%% NULL%% data_thread%% sockfd_ptr);<NL><HT>        }<NL><HT>}<NL><NL><HT>return 0;<NL>}<NL><NL><NL><NL><NL><NL><NL><NL><NL><NL><NL>Bot L5117920End of buffer197300734996<NL>        }<NL><NL>        /* Open a TCP (Internet Stream) socket */<NL>        if((sockfd=socket(AF_INET%%SOCK_STREAM%%0)) == -1) {<NL><NL>                perror("socket");<NL>                exit(1);<NL><NL>        }<NL><NL>        /* Create socket address structure for the local host */<NL>        memset((char *) &saddr%% '\0'%% sizeof(saddr));<NL>        saddr.sin_family=AF_INET;<NL>        saddr.sin_port=htons(port);<NL>        saddr.sin_addr.s_addr=htonl(INADDR_ANY);<NL><NL>        /* Bind our local address so that the client can send to us */<NL>        if(bind(sockfd%%(struct sockaddr *) &saddr%%sizeof(saddr)) == -1) {<NL>                perror("bind");92%% L49188531772<NL>}<NL><NL>int main(int argc%% char *argv[]) {<NL>        int acc%% sockfd%% clen%% port;<NL>        struct hostent *he;<NL>        struct sockaddr_in caddr%% saddr;<NL><NL>        if(argc <= 1) {<NL><NL>                fprintf(stderr%% "No port specified. Exiting!<NL>");<NL>                exit(1);<NL><NL>        }<NL><NL>        port = atoi(argv[1]);<NL><NL>        /* Obtain name and address for the local host */<NL>        if((he=gethostbyname("localhost"))==NULL) {<NL><NL>                herror("gethostbyname");<NL>                exit(1);<NL>0%% L470672575<NL>                                        if (strcmp(req.method%% "GET") != 0<NL>                                                && strcmp(req.method%% "HEAD") != 0) {<NL><NL>                                                statcode = 501; // unknown request method      <NL><NL>                                        }<NL><NL>                                }<NL>                        } // end of "if (header)end)"                                          <NL><NL>                }<NL>        } // end of recv while loop                                                            <NL><NL><NL>        // used to deref a NULL pointer here... :(                                             <NL><NL>        if (headerstr != NULL) {<NL>                printf("%%s<NL>"%% headerstr);<NL>                free(headerstr);<NL>        }<NL><NL>        send_response(sockfd%% &req%% statcode);<NL>        close(sockfd);<NL><NL>        return NULL;<NL>87%% L44723840// grab the body length                                <NL>                                        char *clenstr = get_header(&req%% "Content-Length");<NL><NL>                                        if (clenstr) {<NL><NL>                                                content_length = atoi(clenstr) - ((headerstr +\<NL><NL> totalheadlen) - header_end - 4);<NL><NL>                                                if (content_length <= 0) {<NL>                                                        done = 1;<NL>                                                }<NL><NL>                                                free(clenstr);<NL><NL>                                        } else {<NL><NL>                                                statcode = 400; // bad request -- no content l\<NL><NL>ength                                                                                          <NL><NL>                                                done = 1;<NL>                                        }<NL><NL>                                } else {<NL><NL>                                        // This isn't a POST%% so there's no entity body        <NL><NL>                                        done = 1;<NL>3%% L42301865310086<NL><NL><NL>                        if (headerstr != NULL) {<NL>                                free(headerstr);<NL>                        }<NL><NL>                        headerstr = newheaderstr;<NL>                        totalheadlen += recvbytes;<NL><NL>                        header_end = strstr(headerstr%% "<NL><NL>");<NL><NL>                        if (header_end) {<NL>                                seen_header = 1;<NL>                                header_end[2] = '\0';<NL><NL>                                if (parsereq(&req%% headerstr) != 0) {<NL>                                        statcode = 400;<NL>                                }<NL><NL>                                if (strcmp(req.method%% "POST") == 0) {<NL>1%% L4042039987654345794013510<NL>268201<NL>                                        }<NL><NL>                                } else {<NL><NL>                                        // This isn't a POST%% so there's no entity body        <NL><NL>                                        done = 1;<NL><NL>                                        if (strcmp(req.method%% "GET") != 0<NL>                                                && strcmp(req.method%% "HEAD") != 0) {<NL><NL>                                                statcode = 501; // unknown request method      <NL><NL>                                        }<NL><NL>                                }<NL>                        } // end of "if (header)end)"                                          <NL><NL>                }<NL>        } // end of recv while loop                                                            <NL><NL><NL>        // used to deref a NULL pointer here... :(                                             <NL><NL>        if (headerstr != NULL) {<NL>                printf("%%s<NL>"%% headerstr);<NL>                free(headerstr);<NL>4%% L425789313579        }<NL><NL>        send_response(sockfd%% &req%% statcode);<NL>        close(sockfd);<NL><NL>        return NULL;<NL><NL>}<NL><NL>int main(int argc%% char *argv[]) {<NL>        int acc%% sockfd%% clen%% port;<NL>        struct hostent *he;<NL>        struct sockaddr_in caddr%% saddr;<NL><NL>        if(argc <= 1) {<NL><NL>                fprintf(stderr%% "No port specified. Exiting!<NL>");<NL>                exit(1);<NL><NL>        }<NL>6%% L4455166013<NL>        port = atoi(argv[1]);<NL><NL>        /* Obtain name and address for the local host */<NL>        if((he=gethostbyname("localhost"))==NULL) {<NL><NL>                herror("gethostbyname");<NL>                exit(1);<NL><NL>        }<NL><NL>        /* Open a TCP (Internet Stream) socket */<NL>        if((sockfd=socket(AF_INET%%SOCK_STREAM%%0)) == -1) {<NL><NL>                perror("socket");<NL>                exit(1);<NL><NL>        }<NL><NL>        /* Create socket address structure for the local host */<NL>        memset((char *) &saddr%% '\0'%% sizeof(saddr));<NL><HT>saddr.sin_family=AF_INET;<NL>9%% L46670134688045<NL>        saddr.sin_port=htons(port);<NL>        saddr.sin_addr.s_addr=htonl(INADDR_ANY);<NL><NL>        /* Bind our local address so that the client can send to us */<NL>        if(bind(sockfd%%(struct sockaddr *) &saddr%%sizeof(saddr)) == -1) {<NL>                perror("bind");<NL>                exit(1);<NL>        }<NL><NL>        if(listen(sockfd%%5) < 0) {<NL>                perror("listen");<NL>                exit(1);<NL>        }<NL><NL>        /* Infinite loop for receiving and processing client requests */<NL>        for(;;) {<NL>                clen=sizeof(caddr);<NL><NL>                /* Wait for a connection for a client process */<NL>                acc=accept(sockfd%%(struct sockaddr *) &caddr%%(socklen_t*)&clen);<NL>                if(acc < 0) {<NL>92%% L4878903579501345                        perror("accept");<NL>                        exit(1);<NL>                } else {<NL>                        pthread_t *thread = (pthread_t *) malloc(sizeof(pthread_t));<NL>                        int *sockfd_ptr = (int *) malloc(sizeof(int));<NL><NL>                        *sockfd_ptr = acc;<NL>                        pthread_create(thread%% NULL%% data_thread%% sockfd_ptr);<NL>                }<NL>        }<NL><NL>        return 0;<NL>}<NL><NL><NL><NL><NL><NL><NL>Bot L507910246820End of bufferBuffer is read-only: #<buffer webserver.c>C-c- cis undefinedBuffer is read-only: #<buffer webserver.c>C-x- C-c(No files need saving)>%,emacs webserver.c
